
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class PExample2 {
	public static class mapper1 extends Mapper<LongWritable,Text,Text,FloatWritable>
	{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			String str[]=value.toString().split(",");
			String i=str[1].substring(0, 2);
			
				context.write(new Text(i), new FloatWritable(Float.parseFloat(str[3])));	
			
		}
		
	}
	
	public  static  class MyPartitioner extends Partitioner<Text,FloatWritable>
	{
		public int getPartition(Text key,FloatWritable value,int npartitions)
		{
		String mkey=key.toString();
		if(mkey.equals("01"))
		{
			return 0;
		}
		
		else if(mkey.equals("02"))
		{
			return 1;
		}
		else if(mkey.equals("03"))
		{
			return 2;
		}
		else if(mkey.equals("04"))
		{
			return 3;
		}
		else if(mkey.equals("05"))
		{
			return 4;
		}
		else if(mkey.equals("06"))
		{
			return 5;
		}
		else if(mkey.equals("07"))
		{
			return 6;
		}
		else if(mkey.equals("08"))
		{
			return 7;
		}
		else if(mkey.equals("09"))
		{
			return 8;
		}
		else if(mkey.equals("10"))
		{
			return 9;
		}
		else if(mkey.equals("11"))
		{
			return 10;
		}
		else if(mkey.equals("12"))
		{
			return 11;
		}
				else 
		{
			return 12;
		}
		}
	}
	public static class MyReducer extends Reducer<Text,FloatWritable,Text,FloatWritable>
	{
		public void reduce(Text key,Iterable<FloatWritable> value,Context context) throws IOException, InterruptedException
		{
			float sum=0;
			for(FloatWritable a:value)
			{
				sum=sum+a.get();
			}
			context.write(key,new FloatWritable(sum));
		}
		
	}
		
		
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException
		{
			Configuration cfg=new Configuration();
			Job job=Job.getInstance(cfg,"word count");
			job.setJarByClass(PExample2.class);
			job.setMapperClass(mapper1.class);
			job.setPartitionerClass(MyPartitioner.class);
			job.setReducerClass(MyReducer.class);
			job.setNumReduceTasks(13);
			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(FloatWritable.class);
			
			FileInputFormat.addInputPath(job,new Path(args[0]));
			 FileSystem.get(cfg).delete(new Path(args[1]),true);
			FileOutputFormat.setOutputPath(job,new Path(args[1]));
			  System.exit(job.waitForCompletion(true) ? 0 : 1);

		}


}

