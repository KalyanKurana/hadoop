import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class PExample {
	public static class mapper1 extends Mapper<LongWritable,Text,Text,IntWritable>
	{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			String str[]=value.toString().split(",");
			
			
				context.write(new Text(str[1]), new IntWritable(Integer.parseInt(str[2])));	
			
		}
		
	}
	
	public  static  class MyPartitioner extends Partitioner<Text,IntWritable>
	{
		public int getPartition(Text key,IntWritable value,int npartitions)
		{
		String mkey=key.toString();
		if(mkey.startsWith("f"))
		{
			return 0;
		}
		if(mkey.startsWith("m"))
		{
			return 1;
		}
		else
		{
			return 2;
		}
		}
	}
	public static class MyReducer extends Reducer<Text,IntWritable,Text,IntWritable>
	{
		public void reduce(Text key,Iterable<IntWritable> value,Context context) throws IOException, InterruptedException
		{
			int sum=0;
			for(IntWritable a:value)
			{
				sum=sum+a.get();
			}
			context.write(key,new IntWritable(sum));
		}
		
	}
		
		
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException
		{
			Configuration cfg=new Configuration();
			Job job=Job.getInstance(cfg,"word count");
			job.setJarByClass(PExample.class);
			job.setMapperClass(mapper1.class);
			job.setPartitionerClass(MyPartitioner.class);
			job.setReducerClass(MyReducer.class);
			job.setNumReduceTasks(3);
			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(IntWritable.class);
			
			FileInputFormat.addInputPath(job,new Path(args[0]));
			 FileSystem.get(cfg).delete(new Path(args[1]),true);
			FileOutputFormat.setOutputPath(job,new Path(args[1]));
			  System.exit(job.waitForCompletion(true) ? 0 : 1);

		}


}
