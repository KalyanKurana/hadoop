import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;




public class NYSE2 {
	public static class myclass extends Mapper<LongWritable,Text,Text,FloatWritable>
	{
		public void map(LongWritable key,Text value,Context context) throws IOException,InterruptedException
		{
			String arr[] = value.toString().split(",");
			float highVal = Float.valueOf(arr[4]);
			float lowVal = Float.valueOf(arr[5]);
			float percentage = ((highVal - lowVal) * 100) / lowVal;
		
			context.write(new Text(arr[1]+" "+arr[2]),new FloatWritable(percentage));
		}
	}
	public static class myreducer extends Reducer<Text,FloatWritable,Text,FloatWritable>
	{
		FloatWritable maxValue = new FloatWritable();
		public void reduce(Text key,Iterable<FloatWritable> values,Context context) throws IOException,InterruptedException
		{
			float maxPercentValue=0;
			float temp_val=0;
			
			for (FloatWritable value : values) {
				temp_val = value.get();
				if (temp_val > maxPercentValue) 
				{
					maxPercentValue = temp_val;
				}
			}
			maxValue.set(maxPercentValue);
			
			context.write(key, maxValue);
	  }
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf,"jj");
		job.setJarByClass(NYSE2.class);
		job.setMapperClass(myclass.class);
		job.setReducerClass(myreducer.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(FloatWritable.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(FloatWritable.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileSystem.get(conf).delete(new Path(args[1]),true);
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		System.exit(job.waitForCompletion(true)?0:1);
	}

}
