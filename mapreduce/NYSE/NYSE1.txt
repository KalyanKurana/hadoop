import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;




public class NYSE1 {
	public static class myclass extends Mapper<LongWritable,Text,Text,LongWritable>
	{
		public void map(LongWritable key,Text value,Context context) throws IOException,InterruptedException
		{
			String arr[] = value.toString().split(",");
		
			context.write(new Text(arr[1]),new LongWritable(Long.parseLong(arr[7])));
		}
	}
	public static class myreducer extends Reducer<Text,LongWritable,Text,LongWritable>
	{
		
		public void reduce(Text key,Iterable<LongWritable> values,Context context) throws IOException,InterruptedException
		{
			long sum = 0;
			
	         for (LongWritable val : values)
	         {       	
	        	sum += val.get();      
	         }
	         
	         context.write(key, new LongWritable(sum));
	  }
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf,"jj");
		job.setJarByClass(NYSE1.class);
		job.setMapperClass(myclass.class);
		job.setReducerClass(myreducer.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(LongWritable.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(LongWritable.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileSystem.get(conf).delete(new Path(args[1]),true);
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		System.exit(job.waitForCompletion(true)?0:1);
	}

}
