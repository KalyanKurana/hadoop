
import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;



public class O7 {
	public static class Mymapper extends Mapper<LongWritable,Text,Text,Text>{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException{
			String arr[]=value.toString().split("\t");

			context.write(new Text(arr[2]), new Text(arr[5]));
		}
	}	
	

		public static class Myreducer extends Reducer<Text,Text,Text,Text>
		{
			TreeMap tm=new TreeMap();
			public void reduce(Text key,Iterable<Text> value,Context context) throws IOException, InterruptedException{
			
			String kk="";String ab="";
				int count=0;
				
				for(Text a:value){
					ab=a.toString();
					count++;
				}
				kk=ab+" "+count;
				tm.put(count, ab);
				if(tm.size()>1){
					tm.remove(tm.firstKey());
				}
			
			context.write(key,new Text(tm.toString()));
		}}
					
	
		public static void main(String args[]) throws ClassNotFoundException, IOException, InterruptedException{
			Configuration conf=new Configuration();
			Job job=Job.getInstance(conf,"work");
			job.setJarByClass(O7.class);
			
			job.setMapperClass(Mymapper.class);
			job.setReducerClass(Myreducer.class);
	
			
			
			
			job.setMapOutputKeyClass(Text.class);
			job.setMapOutputValueClass(Text.class);
			
			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(Text.class);
			
			FileSystem.get(conf).delete(new Path(args[1]),true);
			FileInputFormat.addInputPath(job, new Path(args[0]));	
			FileOutputFormat.setOutputPath(job,new Path(args[1]));
			
			System.exit(job.waitForCompletion(true)?0:1);

		}	
}

    
