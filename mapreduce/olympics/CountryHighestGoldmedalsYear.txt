import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;




public class Ogold {
	public static class mapper1 extends Mapper<LongWritable,Text,Text,Text> 
	{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			String arr[]=value.toString().split("\t"); 
			context.write(new Text(arr[3]),new Text(arr[2]+","+arr[6]));
		}
	}
public static class MyReducer extends Reducer<Text,Text,NullWritable,Text>
{
TreeMap tm=new TreeMap();
	
	public void reduce(Text key,Iterable<Text> value,Context context) throws IOException, InterruptedException
	{
		int gold=0,sum=0;
		String ss=" ",country=" ",ss1="";
		for(Text a:value)
		{
			String str[]=a.toString().split(",");
		gold=Integer.parseInt(str[1]);
		sum=sum+gold;
		
		country=str[0];
		}
		ss=key.toString();
        ss1=ss+" "+sum;    
		tm.put(ss1, country);
		if(tm.size()>1)
		{
			tm.remove(tm.firstKey());
		}
		//maxword.set(key);
		context.write(NullWritable.get(), new Text(tm.toString()));
	}
}
		/*protected void cleanup(Context context) throws IOException, InterruptedException
		
		{
			context.write(maxword, new Text(tm.toString()));
			
		}
	}*/


	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration cfg=new Configuration();
		Job job=Job.getInstance(cfg,"wordcount");
		job.setJarByClass(Ogold.class);
		job.setMapperClass(mapper1.class);
		job.setReducerClass(MyReducer.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job,new Path(args[0]));
		FileSystem.get(cfg).delete(new Path(args[1]), true);
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}

}
