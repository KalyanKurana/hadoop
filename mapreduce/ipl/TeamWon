package ipl;



import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class TeamWon {
	public static class mapper1 extends Mapper<LongWritable,Text,Text,IntWritable> 
	{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			String arr[]=value.toString().split(",");
			
	context.write(new Text(arr[14]),new IntWritable(1));
			
		}
	}
	public static class MyReducer extends Reducer<Text,Text,Text,Text>
	{
		TreeMap<Integer,Text> tm=new TreeMap<Integer,Text>();
		
		public void reduce(Text key,Iterable<Text> value,Context context) throws IOException, InterruptedException
		{
			int count=0;
			String team=null;
			
	 String str[]=value.toString().split(",");
			//	int year=Integer.parseInt(str[0]);
				//team=str[1];
				//count++;
			
			
		
			context.write(new Text(team),new Text(str[0]+" "+str[1]));
			}
		
	}
	
	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf,"jj");
		job.setJarByClass(TeamWon.class);
		job.setMapperClass(mapper1.class);
		//job.setReducerClass(MyReducer.class);
		//job.setMapOutputKeyClass(Text.class);
		//job.setMapOutputValueClass(Text.class);
	//	job.setNumReduceTasks(0);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileSystem.get(conf).delete(new Path(args[1]),true);
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		System.exit(job.waitForCompletion(true)?0:1);
	}

	}
