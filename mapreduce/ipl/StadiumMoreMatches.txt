


import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Sample1 {
	public static class mapper1 extends Mapper<LongWritable,Text,Text,IntWritable> 
	{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			String arr[]=value.toString().split(",");
			
	context.write(new Text(arr[14]),new IntWritable(1));
			
		}
	}
	public static class MyReducer extends Reducer<Text,IntWritable,Text,Text>
	{	TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		public void reduce(Text key,Iterable<IntWritable> value,Context context) throws IOException, InterruptedException
		{
			int count=0;
			for(IntWritable i:value)
			{
				count++;
				tm.put(count, key.toString());
			
			if(tm.size()>3)
			{
				tm.remove(tm.firstKey());
			}
			}
			
			
		
			
			}
		public void cleanup(Context context) throws IOException, InterruptedException
		{
			context.write(new Text(),new Text(tm.toString()));
		}
		
	}
	
	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf,"jj");
		job.setJarByClass(Sample1.class);
		job.setMapperClass(mapper1.class);
		job.setReducerClass(MyReducer.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);
	//job.setNumReduceTasks(0);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileSystem.get(conf).delete(new Path(args[1]),true);
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		System.exit(job.waitForCompletion(true)?0:1);
	}



}
